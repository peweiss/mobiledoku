<?xml version="1.0" encoding="utf-8"?>
<!-- 
	Main-MXML. Hier werden Multilanguage, die Navigation und der Start-Screen initialisiert.

	Autor: 		Petra Weiss
	Datum:		4.2.2014
	Gesehen:	http://www.adobe.com/devnet/air/flex/articles/localizing_flex_air_apps.html (Multilanguage)
				https://issues.apache.org/jira/browse/FLEX-33839 (Navigation)
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   applicationDPI="480"
			   applicationComplete="init(event)"
				>

	<!--
	splashScreenImage="@Embed('assets/images/splash_1080x1920.jpg')"
	splashScreenScaleMode="letterbox"
	-->
	
	<fx:Script>
		<![CDATA[
			import com.adobe.utils.LocaleUtil;
			
			import flash.utils.getDefinitionByName;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.resources.ResourceManager;
			
			import spark.events.IndexChangeEvent;
			import spark.transitions.CrossFadeViewTransition;
			
			// importiere Views, auf die verlinkt wird
			import views.Getraenkezubereitung;
			import views.Home;
			import views.Sicherheitshinweise;
			import views.Stoerungsbehebung;
			
			// deklariere Variablen für Navigation
			private var isOpen:Boolean;	
			
			[Bindable]
			private var currentStageWidth:Number;
			
			[Bindable]
			private var currentStageHeight:Number;

			
			// wenn App initialisiert wird ...
			protected function init(event:FlexEvent):void {
				
				// Definiere Default Einblende-Art für einzelne Views
				// CrossFadeViewTransition: View wird überblendend angezeigt
				navigator.defaultPushTransition = new CrossFadeViewTransition();
				navigator.defaultPopTransition = new CrossFadeViewTransition();
				
				stage.addEventListener(Event.RESIZE, orientationHandler);
				
				currentStageWidth = stage.stageWidth*-1;
				lateralMenu.x = currentStageWidth-500; // currentStageWidth-500 -> die Navigation wird ausserhalb des sichtbaren Bereichs geschoben
				currentStageHeight = navigator.height-45;
				lateralMenu.height = currentStageHeight;			
				lateralMenu.x = currentStageWidth-500;
				isOpen = false;
				
				// definiere Array mit den Sprachen, die unterstützt werden. Fallback-Sprache ist "de_CH"
				var sortedLocales:Array = LocaleUtil.sortLanguagesByPreference(['de_CH', 'en_US'], Capabilities.languages, 'de_CH');
				// verwendeten Sprachraum erkennen
				ResourceManager.getInstance().localeChain = sortedLocales;
				// Test mit bestimmter Sprache
				// ResourceManager.getInstance().localeChain=["en_US"];
			}
			
			// Orientierung Gerät Portrait/Landscape -> evtl. deaktivieren
			private function orientationHandler(event:Event):void {
				currentStageWidth = stage.stageWidth*-1;
				
				if(isOpen == false){
					lateralMenu.x = currentStageWidth-500;
				}
				
				currentStageHeight = navigator.height-45;
				lateralMenu.height = currentStageHeight;	
				
				trace(lateralMenu.height);
			}
			
			protected function menuHandler(event:MouseEvent):void {
				if(isOpen == true){
					moveOut.play();
					isOpen = false;
				} else if(isOpen == false){
					moveIn.play();
					isOpen = true;
				}
			}
			
			protected function changeHandler(event:IndexChangeEvent):void {
				isOpen = false;
				moveOut.play();
				// zeige ausgewählte View
				navigator.pushView(componentsList.selectedItem.view);
			}

			protected function menuBackgroundHandler(event:MouseEvent):void {
				isOpen = false;
				moveOut.play();
			}
		
			// rendert das Menu
			import renderers.MenuRenderer;
			
			// DEBUG
			// [Bindable]
			// public var text:String;	
			
			// aktiviert Navigationspunkt, wenn Inhalt nicht über Navigation sondern Button geladen wurde
			public function activateView(event:MouseEvent, targetView:Class):void{
				trace('###deactivateHome###');
				
				// Definiere Variable für den zu verändernden Menupunkt
				var menuItem:int;
	
				// Ausgabe aktueller State
				trace('current State:' + FlexGlobals.topLevelApplication.componentsList.dataGroup.getElementAt(0).currentState);
				
				// Ausgabe des aktuellen caret Item
				trace('caret Item:' + FlexGlobals.topLevelApplication.componentsList.caretIndex);
				
				
				// Switch Case um zu bestimmen welcher Button gedrueckt wurde. So können wir jedem Button einen Menupunkt in der 
				// Navigation zuweisen.
				// @menuItem: Variable mit dem zu änderten Listenelement in der Navigation. 
				
				switch(targetView){
					//case Inbetriebnahme:
					//menuItem = 2;
					//trace("Der User hat Inbetriebnahme gewählt");
					//break;
					case Getraenkezubereitung:
						menuItem = 3;
						trace("Der User hat Getränkezubereitzung gewählt");
						break;
					//case Reinigung:
					//menuItem = 4;
					//trace("Der User hat Reinigung gewählt");
					//break;
					//case Entkalkung:
					//menuItem = 5;
					//trace("Der User hat Reinigung gewählt");
					//break;
					case Stoerungsbehebung:
						menuItem = 6;
						trace("Der User hat Reinigung gewählt");
						break;
					default:
						trace("Es wurde nichts ausgewählt");
				}
				
				// Setze den Focus auf den angewaehlten Menupunkt
				componentsList.selectedIndex = menuItem;
				
				// Gehe zur angewaehlten View
				navigator.pushView(targetView);
			}
			
			
		]]>
	</fx:Script>

	<fx:Style source="/assets/css/main.css"/>
	
	<!-- Aktiviere Ressourcen-Bundle für die Sprachen -->
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>
	
	<fx:Declarations>
		<s:Move id="moveIn" duration="200" target="{lateralMenu}" xTo="0"/>
		<s:Move id="moveOut" duration="200" target="{lateralMenu}" xTo="{currentStageWidth-500}"/>
	</fx:Declarations>
	<!-- DEBUG
	<s:TextArea id="test" text="{text}" top="470"  />
	-->

	<!-- Header-Leiste / firstView ist der HomeScreen --> 
	<s:ViewNavigator id="navigator" firstView="views.Home" width="100%" height="100%" skinClass="assets.skins.ViewNavigatorSkin_Default" styleName="default">
		<s:navigationContent>
	<!--		<s:Button styleName="headernav-btn" label=" " icon="@Embed('assets/icons/btn_nav_w.png')" click="menuHandler(event)" />	-->		
			<s:Button styleName="headernav-nav" click="menuHandler(event)" />
		</s:navigationContent>
		
		<s:titleContent>
			<s:Label styleName="headernav-title" text="{resourceManager.getString('resources', 'MAIN_TITLE')}" />
		</s:titleContent>
		
		<s:actionContent>
			<s:Button click="navigator.pushView(Sicherheitshinweise)" styleName="headernav-shw" x="-136" />
			<s:Button click="navigator.popToFirstView()" styleName="headernav-suche" />
		</s:actionContent>
	</s:ViewNavigator>
	<!-- Navigation von links -->
	<s:Group id="lateralMenu" width="100%" y="136">
		<s:Graphic width="100%" height="100%" click="menuBackgroundHandler(event)">
			<!-- Transparenz, die sich bei Öffnen Navigation über View schiebt -->
			<s:BitmapImage width="100%" height="100%" scaleMode="zoom" source="@Embed('assets/images/bg.png')"/>
		</s:Graphic>
		
		<s:List id="componentsList" itemRenderer="renderers.MenuRenderer" width="700" height="100%" change="changeHandler(event)" contentBackgroundColor="#2f2f2f" alpha="0.95">
			<s:ArrayList>
				<fx:Object iconNormal="@Embed('assets/icons/btn_home_w.png')"  
						   iconActive="@Embed('assets/icons/btn_home_b.png')" label="{resourceManager.getString('resources', 'HOME')}" type="view" view="{Home}" />
				
				<fx:Object iconNormal="@Embed('assets/icons/btn_suche_w.png')" 
						   iconActive="@Embed('assets/icons/btn_suche_b.png')" label="{resourceManager.getString('resources', 'SUCHE')}" type="view" view="{Home}" />
				
				<fx:Object iconNormal="@Embed('assets/icons/btn_ibn_w.png')" 
						   iconActive="@Embed('assets/icons/btn_ibn_b.png')" label="{resourceManager.getString('resources', 'IBN')}" type="view" view="{Home}" />				
				
				<fx:Object iconNormal="@Embed('assets/icons/btn_gzb_w.png')" 
						   iconActive="@Embed('assets/icons/btn_gzb_b.png')" label="{resourceManager.getString('resources', 'GZB')}" type="view" view="{Getraenkezubereitung}" />
			
				<fx:Object iconNormal="@Embed('assets/icons/btn_reinigung_w.png')" 
						   iconActive="@Embed('assets/icons/btn_reinigung_b.png')" label="{resourceManager.getString('resources', 'REINIGUNG')}" type="view" view="{Getraenkezubereitung}"/>
				
				<fx:Object iconNormal="@Embed('assets/icons/btn_entkalkung_w.png')" 
						   iconActive="@Embed('assets/icons/btn_entkalkung_b.png')" label="{resourceManager.getString('resources', 'ENTKALKUNG')}" type="view" view="{Getraenkezubereitung}"/>

				<fx:Object iconNormal="@Embed('assets/icons/btn_sbh_w.png')" 
						   iconActive="@Embed('assets/icons/btn_sbh_b.png')" label="{resourceManager.getString('resources', 'SBH')}" type="view" view="{Stoerungsbehebung}"/>

				<fx:Object iconNormal="@Embed('assets/icons/btn_hotline_w.png')" 
						   iconActive="@Embed('assets/icons/btn_hotline_b.png')" label="{resourceManager.getString('resources', 'HOTLINE')}" type="view" view="{Getraenkezubereitung}"/>

				<fx:Object iconNormal="@Embed('assets/icons/btn_shw_w.png')" 
						   iconActive="@Embed('assets/icons/btn_shw_b.png')" label="{resourceManager.getString('resources', 'SHW')}" type="view" view="{Sicherheitshinweise}"/>

				<fx:Object iconNormal="@Embed('assets/icons/btn_sprache_w.png')" 
						   iconActive="@Embed('assets/icons/btn_sprache_b.png')" label="{resourceManager.getString('resources', 'SPRACHE')}" type="view" view="{Getraenkezubereitung}"/>

			</s:ArrayList>
		</s:List>
	</s:Group>

</s:Application>
