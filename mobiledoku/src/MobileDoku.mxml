<?xml version="1.0" encoding="utf-8"?>
<!-- 
	Main-MXML. Hier werden Multilanguage, die Navigation und der Start-Screen initialisiert.

	Autor: 		Petra Weiss
	Datum:		4.2.2014
	Gesehen:	http://www.adobe.com/devnet/air/flex/articles/localizing_flex_air_apps.html (Multilanguage)
				https://issues.apache.org/jira/browse/FLEX-33839 (Navigation)
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   applicationDPI="480"
			   applicationComplete="init(event)"
			   splashScreenImage="@Embed('assets/images/splashscreen.png')"
			   splashScreenMinimumDisplayTime="3000"
			   splashScreenScaleMode="letterbox"
				>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.utils.LocaleUtil;
			
			import flash.net.navigateToURL;
			import flash.utils.getDefinitionByName;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.resources.ResourceManager;
			
			import spark.events.IndexChangeEvent;
			import spark.transitions.CrossFadeViewTransition;
			
			import renderers.MenuRenderer;
			
			// importiere Views
			import views.Home;
			import views.Suche;
			import views.Inbetriebnahme;
			import views.Getraenkezubereitung;
			import views.Reinigung;
			import views.Entkalkung;
			import views.Sicherheitshinweise;
			import views.Sprache;
			import views.Stoerungsbehebung;
			
			// deklariere Variablen für Navigation
			private var isOpen:Boolean;	
			
			[Bindable]
			private var currentStageWidth:Number;
			
			[Bindable]
			private var currentStageHeight:Number;
			
			// deklariere Variable contentWidth für Content-Breite (Abstand links/rechts: 80px)
			[Bindable]
			private var contentWidth:Number;
			// setContentWidth gibt Inhaltsbreite zurück (für Definition von Trennlinien, Breite Mediainhalte etc.)
			public function setContentWidth():Number {
				contentWidth = screen.width-160; // -PaddingLeft (80) und -PaddingRight (80)
				return contentWidth;
			}
			
			// wenn App initialisiert wird ...
			protected function init(event:FlexEvent):void {
				
				// Definiere Default Einblende-Art für einzelne Views
				// CrossFadeViewTransition: View wird überblendend angezeigt
				navigator.defaultPushTransition = new CrossFadeViewTransition();
				navigator.defaultPopTransition = new CrossFadeViewTransition();
				
				// initialisiere Menu
				currentStageWidth = stage.stageWidth*-1;
				lateralMenu.x = currentStageWidth-500; // currentStageWidth-500 -> die Navigation wird ausserhalb des sichtbaren Bereichs geschoben
				currentStageHeight = navigator.height-45;
				lateralMenu.height = currentStageHeight;			
				lateralMenu.x = currentStageWidth-500;
				isOpen = false;
				
				// definiere Array mit den Sprachen, die unterstützt und vom System verwendet werden. Fallback-Sprache ist "de_CH"
				var sortedLocales:Array = LocaleUtil.sortLanguagesByPreference(['de_CH', 'en_US'], Capabilities.languages, 'de_CH');
				// verwendeten Sprachraum erkennen und zuweisen
				ResourceManager.getInstance().localeChain = sortedLocales;
			}
			
			// via View:Sprache kann Sprache gesetzt (übersteuert) werden
			public function changeLanguage(event:Event, language:String):void {
				// setze je nach übergebenem Sprache-String die Sprache neu
				switch(language){
					case "deutsch":
						resourceManager.localeChain = ["de_CH"];
						//ArrayCollection der Navigation aktualisieren, damit die neue Sprache auch in der Navi angezeicht wird!
						liste.refresh();
						break;
					case "englisch":
						resourceManager.localeChain = ["en_US"];
						//ArrayCollection der Navigation aktualisieren, damit die neue Sprache auch in der Navi angezeicht wird!
						liste.refresh();
						break;
					case "franzoesisch":
						resourceManager.localeChain = ["fr_FR"];
						//ArrayCollection der Navigation aktualisieren, damit die neue Sprache auch in der Navi angezeicht wird!
						liste.refresh();
						break;	
				}
			}
			
			// Slidet Menu ein oder aus
			protected function menuHandler(event:MouseEvent):void {
				if(isOpen == true){
					moveOut.play();
					isOpen = false;
				} else if(isOpen == false){
					moveIn.play();
					isOpen = true;
				}
			}
			
			// Hotline-Anruf -> verwendet in Navigation, Home- und Störungsbehebung-View
			public function callHotline():void{
				navigateToURL(new URLRequest("tel:0790000000")); // Test it: Test-Nummer hinterlegt ..
			}
			
			protected function changeHandler(event:IndexChangeEvent):void {
				trace ('Auswahl getroffen'); // sobald Auswahl wechselt, kommt diese Funktion zum Tragen 
				isOpen = false;
				moveOut.play();
				
				// ist das Hotline-Element ausgewaehlt?
				if (componentsList.selectedIndex == 7) {
					callHotline(); // ruf Hotline an
				} else {
					// zeige ausgewählte View
					navigator.pushView(componentsList.selectedItem.view);	
				}
			}

			protected function menuBackgroundHandler(event:MouseEvent):void {
				isOpen = false;
				moveOut.play();
			}
			
			// aktiviert Navigationspunkt, wenn Inhalt nicht über Navigation sondern über Button geladen wurde
			public function activateView(event:MouseEvent, targetView:Class):void{
				trace('###deactivateHome###');
				
				// Definiere Variable für den zu verändernden Menupunkt
				var menuItem:int;
	
				// Ausgabe aktueller State
				trace('current State:' + FlexGlobals.topLevelApplication.componentsList.dataGroup.getElementAt(0).currentState);
				
				// Ausgabe des aktuellen caret Item
				trace('caret Item:' + FlexGlobals.topLevelApplication.componentsList.caretIndex);
				
				
				// Switch Case, um zu bestimmen, welcher Button gedrueckt wurde. So können wir jedem Button einen Menupunkt in der 
				// Navigation zuweisen.
				// @menuItem: Variable mit dem zu änderten Listenelement in der Navigation. 
				switch(targetView){
					case Suche:
						menuItem = 1;
						trace("Der User hat Suche gewählt");
						break;
					case Inbetriebnahme:
					menuItem = 2;
					trace("Der User hat Inbetriebnahme gewählt");
					break;
					case Getraenkezubereitung:
						menuItem = 3;
						trace("Der User hat Getränkezubereitzung gewählt");
						break;
					case Reinigung:
					menuItem = 4;
					trace("Der User hat Reinigung gewählt");
					break;
					case Entkalkung:
					menuItem = 5;
					trace("Der User hat Entkalkung gewählt");
					break;
					case Stoerungsbehebung:
						menuItem = 6;
						trace("Der User hat Stoerungsbehebung gewählt");
						break;
					case Sicherheitshinweise:
						menuItem = 8;
						trace("Der User hat Sicherheitshinweise gewählt");
						break;
					default:
						trace("Es wurde nichts ausgewählt");
				}
				// Setze den Focus auf den angewaehlten Menupunkt
				componentsList.selectedIndex = menuItem;
				
				// Gehe zur angewaehlten View
				navigator.pushView(targetView);
			}
			
		]]>
	</fx:Script>

	<fx:Style source="/assets/css/main.css"/>
	
	<!-- Aktiviere Ressourcen-Bundle für die Sprachen -->
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>
	
	<fx:Declarations>
		<s:Move id="moveIn" duration="200" target="{lateralMenu}" xTo="0"/>
		<s:Move id="moveOut" duration="200" target="{lateralMenu}" xTo="{currentStageWidth-500}"/>
	</fx:Declarations>

	<!-- Header-Leiste / firstView ist der HomeScreen --> 
	<s:ViewNavigator id="navigator" firstView="views.Home" width="100%" height="100%" skinClass="assets.skins.ViewNavigatorSkin_Default" styleName="default">
		<s:navigationContent>
			<s:Button styleName="headernav-nav" click="menuHandler(event)" />
			<!-- Label wird hier platziert, damit sie bei Swipe stehen bleibt -->
			<s:Label styleName="headernav-title" text="{resourceManager.getString('resources', 'MAIN_TITLE')}" paddingLeft="150" height="136" verticalAlign="middle" click="menuHandler(event)" />
		</s:navigationContent>

		<s:actionContent>
			<s:Button click="activateView(event, Sicherheitshinweise)" styleName="headernav-shw" x="-136" />
			<s:Button click="activateView(event, Suche)" styleName="headernav-suche" />
		</s:actionContent>
	</s:ViewNavigator>
	<!-- Navigation von links -->
	<s:Group id="lateralMenu" width="100%" y="136">
		<!-- Transparenz, die sich bei Öffnen Navigation über View schiebt -->
		<s:Graphic width="100%" height="100%" click="menuBackgroundHandler(event)">
			<s:BitmapImage width="100%" height="100%" scaleMode="zoom" source="@Embed('assets/images/bg.png')"/>
		</s:Graphic>
		
		<!-- Renderer: MenuRenderer / sobald Nutzer mit Navigation integriert wird Funktion changeHandler() aufgerufen -->
		<s:List id="componentsList" itemRenderer="renderers.MenuRenderer" width="700" height="100%" change="changeHandler(event)" contentBackgroundColor="#2f2f2f" alpha="0.95">
			<s:ArrayCollection id="liste">
				<fx:Object iconNormal="@Embed('assets/icons/btn_home_w.png')"  
						   iconActive="@Embed('assets/icons/btn_home_b.png')" label="{resourceManager.getString('resources', 'HOME')}" type="view" view="{Home}" />
				
				<fx:Object iconNormal="@Embed('assets/icons/btn_suche_w.png')" 
						   iconActive="@Embed('assets/icons/btn_suche_b.png')" label="{resourceManager.getString('resources', 'SUCHE')}" type="view" view="{Suche}" />
				
				<fx:Object iconNormal="@Embed('assets/icons/btn_ibn_w.png')" 
						   iconActive="@Embed('assets/icons/btn_ibn_b.png')" label="{resourceManager.getString('resources', 'IBN')}" type="view" view="{Inbetriebnahme}" />				
				
				<fx:Object iconNormal="@Embed('assets/icons/btn_gzb_w.png')" 
						   iconActive="@Embed('assets/icons/btn_gzb_b.png')" label="{resourceManager.getString('resources', 'GZB')}" type="view" view="{Getraenkezubereitung}" />
			
				<fx:Object iconNormal="@Embed('assets/icons/btn_reinigung_w.png')" 
						   iconActive="@Embed('assets/icons/btn_reinigung_b.png')" label="{resourceManager.getString('resources', 'REINIGUNG')}" type="view" view="{Reinigung}"/>
				
				<fx:Object iconNormal="@Embed('assets/icons/btn_entkalkung_w.png')" 
						   iconActive="@Embed('assets/icons/btn_entkalkung_b.png')" label="{resourceManager.getString('resources', 'ENTKALKUNG')}" type="view" view="{Entkalkung}"/>

				<fx:Object iconNormal="@Embed('assets/icons/btn_sbh_w.png')" 
						   iconActive="@Embed('assets/icons/btn_sbh_b.png')" label="{resourceManager.getString('resources', 'SBH')}" type="view" view="{Stoerungsbehebung}"/>

				<fx:Object iconNormal="@Embed('assets/icons/btn_hotline_w.png')" 
						   iconActive="@Embed('assets/icons/btn_hotline_b.png')" label="{resourceManager.getString('resources', 'HOTLINE')}" />

				<fx:Object iconNormal="@Embed('assets/icons/btn_shw_w.png')" 
						   iconActive="@Embed('assets/icons/btn_shw_b.png')" label="{resourceManager.getString('resources', 'SHW')}" type="view" view="{Sicherheitshinweise}"/>

				<fx:Object iconNormal="@Embed('assets/icons/btn_sprache_w.png')" 
						   iconActive="@Embed('assets/icons/btn_sprache_b.png')" label="{resourceManager.getString('resources', 'SPRACHE')}" type="view" view="{Sprache}"/>

			</s:ArrayCollection>
		</s:List>
	</s:Group>

</s:Application>
